diff --git a/parte2/FifoTest/fifotest b/parte2/FifoTest/fifotest
index aa32b90..398032e 100755
Binary files a/parte2/FifoTest/fifotest and b/parte2/FifoTest/fifotest differ
diff --git a/parte2/Makefile b/parte2/Makefile
index 8c61775..6466851 100755
--- a/parte2/Makefile
+++ b/parte2/Makefile
@@ -1,5 +1,5 @@
 obj-m +=  fifomod.o
-fifomod-objs = fifoproc2.o cbuffer.o
+fifomod-objs = fifoproc.o cbuffer.o
 
 all:
 	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
diff --git a/parte2/fifoproc.c b/parte2/fifoproc.c
index 3d008c7..79f6489 100755
--- a/parte2/fifoproc.c
+++ b/parte2/fifoproc.c
@@ -9,8 +9,8 @@
 #include <linux/ftrace.h>
 #include "cbuffer.h"
 
-#define MAX_CBUFFER_LEN 32
-#define MAX_KBUF 60 
+#define MAX_CBUFFER_LEN 50
+#define MAX_KBUF MAX_CBUFFER_LEN 
 
 cbuffer_t* cbuffer; /* Buffer circular */
 static struct proc_dir_entry *proc_entry;
@@ -93,7 +93,7 @@ static int fifoproc_open(struct inode *inode, struct file *file){
         	nr_cons_waiting++;
         	up(&mtx);
             if(down_interruptible(&queue_sem_cons)){
-                down_interruptible(&mtx);
+                down(&mtx);
                 nr_cons_waiting--;
                 up(&mtx);
                 return -EINTR;
@@ -128,7 +128,7 @@ static int fifoproc_open(struct inode *inode, struct file *file){
         	nr_prod_waiting++;
         	up(&mtx);
             if(down_interruptible(&queue_sem_prod)){
-                down_interruptible(&mtx);
+                down(&mtx);
                 nr_prod_waiting--;
                 up(&mtx);
                 return -EINTR;
@@ -152,24 +152,32 @@ static int fifoproc_open(struct inode *inode, struct file *file){
 
 /* Se invoca al hacer close() de entrada /proc */
 static int fifoproc_release(struct inode *inode, struct file *file){
+
+   if(down_interruptible(&mtx)){return -EINTR;}
+
     if(file->f_mode & FMODE_READ)
     {
-        if(down_interruptible(&mtx)){return -EINTR;}
-
-        clear_cbuffer_t(cbuffer);
         cons_count--;
-        up(&mtx);
-    }
+	//cond_signal(prod); 
+	if(nr_prod_waiting >0){  
+		up(&queue_sem_prod);
+		nr_prod_waiting--;
+		}  
+  }
     else
     {
-       if(down_interruptible(&mtx)){return -EINTR;}
-	   
-	   clear_cbuffer_t(cbuffer);
-       prod_count--;
-       up(&mtx);
+	prod_count--;
+	//cond_signal(cons); 
+	if(nr_cons_waiting >0){  
+		up(&queue_sem_cons);
+		nr_cons_waiting--;
+		}
     }
 
-    
+   if (prod_count==0 && cons_count==0)
+	  clear_cbuffer_t(cbuffer);
+
+      up(&mtx);    
     return 0;
 }
 
@@ -177,10 +185,7 @@ static int fifoproc_release(struct inode *inode, struct file *file){
 /*done*/
 static ssize_t fifoproc_read(struct file *filp, char __user *buff, size_t len, loff_t *off){
 	
-	char kbuffer[MAX_KBUF] ={};
-		
-	if((*off) > 0)
-      return 0;
+	char kbuffer[MAX_KBUF] ={};	
 	
 	//trace_printk("READ size len: %i  %i '\n", len,strlen(kbuffer));
 	//if (len> MAX_CBUFFER_LEN || len> MAX_KBUF) { return -ENOSPC;}
@@ -193,7 +198,7 @@ static ssize_t fifoproc_read(struct file *filp, char __user *buff, size_t len, l
 		nr_cons_waiting++;
 		up(&mtx);
 		if(down_interruptible(&queue_sem_cons)){
-			down_interruptible(&mtx);
+			down(&mtx);
 			nr_cons_waiting--;
 			up(&mtx);
 			return -EINTR;
@@ -203,7 +208,7 @@ static ssize_t fifoproc_read(struct file *filp, char __user *buff, size_t len, l
 	}  // while
 	
 	/* Detectar fin de comunicación por error (consumidor cierra FIFO antes) */
-	if (prod_count==0 && is_empty_cbuffer_t(cbuffer) != 0) {up(&mtx); return 0;}
+	if (prod_count==0 && is_empty_cbuffer_t(cbuffer)) {up(&mtx); return 0;}
 	
 	/*len chars de cbuffer a kbuf*/
 	remove_items_cbuffer_t(cbuffer,kbuffer,len);
@@ -220,8 +225,6 @@ static ssize_t fifoproc_read(struct file *filp, char __user *buff, size_t len, l
 	// returns to user space 
 	if(copy_to_user(buff,kbuffer,len)){return -EFAULT;}
 	
-	
-	(*off) += len;
 	/*nº bytes leídos (>0 se podra volver a llamar, 0 eof)*/
 	return len;
 }
@@ -247,7 +250,7 @@ static ssize_t fifoproc_write(struct file *file, const char __user *buff, size_t
 		up(&mtx);
 		/*Bloqueo en sem de cola*/
 		if(down_interruptible(&queue_sem_prod)){
-			down_interruptible(&mtx);
+			down(&mtx);
 			nr_prod_waiting--;
 			up(&mtx);
 			return -EINTR;
@@ -271,7 +274,6 @@ static ssize_t fifoproc_write(struct file *file, const char __user *buff, size_t
 	//unlock(mtx);
 	up(&mtx);
 	
-	(*off)+= len;
 	
 	/*nº bytes escritos*/
 	return len;	  
